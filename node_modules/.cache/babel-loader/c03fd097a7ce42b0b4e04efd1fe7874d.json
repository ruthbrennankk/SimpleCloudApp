{"remainingRequest":"/Users/ruthbrennan/WebstormProjects/ia2/node_modules/babel-loader/lib/index.js!/Users/ruthbrennan/WebstormProjects/ia2/node_modules/eslint-loader/index.js??ref--13-0!/Users/ruthbrennan/WebstormProjects/ia2/src/main.js","dependencies":[{"path":"/Users/ruthbrennan/WebstormProjects/ia2/src/main.js","mtime":1607101627164},{"path":"/Users/ruthbrennan/WebstormProjects/ia2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ruthbrennan/WebstormProjects/ia2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/ruthbrennan/WebstormProjects/ia2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/ruthbrennan/WebstormProjects/ia2/src/main.js"],"names":["SERVER_PORT","express","require","app","cors","AWS","config","update","region","AWS_BUCKET","AWS_FILENAME","TABLE","s3","S3","bucketParams","Bucket","Key","dynamoDB","DynamoDB","dbParams","TableName","KeySchema","AttributeName","KeyType","AttributeDefinitions","AttributeType","BillingMode","use","static","asyncErrWrapper","asyncFun","req","res","next","catch","getFromS3Bucket","getObject","promise","writeToDynamo","movieData","docClient","DocumentClient","map","movie","params","Item","year","title","info","put","err","data","console","error","JSON","stringify","queryDB","queryParams","KeyConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","query","get","Number","dbRes","send","Items","delete","_","log","deleteTable","waitFor","status","post","createTable","Body","response_json","parse","Promise","all","message","startsWith","listen"],"mappings":"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","sourcesContent":["const SERVER_PORT = 8001;\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\nconst AWS = require(\"aws-sdk\");\nAWS.config.update({\n  region: 'us-east-1'\n});\n\nconst AWS_BUCKET = \"csu44000assign2useast20\";\nconst AWS_FILENAME = \"moviedata.json\";\nconst TABLE = \"Movies\";\n\nconst s3 = new AWS.S3();\n\n//dynamoDB boilerplate\nconst bucketParams = {\n  Bucket: AWS_BUCKET,\n  Key: AWS_FILENAME\n};\n\nlet dynamoDB = new AWS.DynamoDB();\nlet dbParams = {\n  TableName: TABLE,\n  KeySchema: [\n    { AttributeName: \"year\", KeyType: \"HASH\" },  //Partition key\n    { AttributeName: \"title\", KeyType: \"RANGE\" }  //Sort key\n  ],\n  AttributeDefinitions: [\n    { AttributeName: \"year\", AttributeType: \"N\" },\n    { AttributeName: \"title\", AttributeType: \"S\" }\n  ],\n  BillingMode: \"PAY_PER_REQUEST\"\n};\n\napp.use(cors()); //Allow cross origin requests for local development\napp.use(express.static('public')); //serve the webpage\n\n//this feature is coming natively in Express 5\n//Express 5 is currently in Alpha so this will do for now\n//catches async errors and passes them to the error handling fn defined at the end\nfunction asyncErrWrapper(asyncFun) {\n  return function (req, res, next) {\n    asyncFun(req, res, next).catch(next);\n  };\n}\n\n//returns a promise object from the s3 bucket\nfunction getFromS3Bucket() {\n  return s3.getObject(bucketParams).promise();\n}\n\n//write the object to the db\nfunction writeToDynamo(movieData) {\n  let docClient = new AWS.DynamoDB.DocumentClient();\n  movieData.map(function (movie) {\n    let params = {\n      TableName: TABLE,\n      Item: {\n        \"year\": movie.year,\n        \"title\": movie.title,\n        \"info\": movie.info\n      }\n    };\n    return docClient.put(params, function (err, data) {\n      if (err) {\n        console.error(\"Unable to add movie\", movie.title, \". Error JSON:\", JSON.stringify(err, null, 2));\n      }\n    }).promise();\n  });\n  return movieData;\n}\n\n//querys the database\nfunction queryDB(year, title) {\n  let queryParams = {\n    TableName: TABLE,\n    KeyConditionExpression: \"#yr = :yyyy and begins_with(title, :titleStart)\",\n    ExpressionAttributeNames: {\n      \"#yr\": \"year\"\n    },\n    ExpressionAttributeValues: {\n      \":yyyy\": year,\n      \":titleStart\": title\n    }\n  };\n\n  let docClient = new AWS.DynamoDB.DocumentClient();\n  return docClient.query(queryParams).promise();\n}\n\napp.get(\"/movie\", asyncErrWrapper(async (req, res) => {\n  let dbRes = await queryDB(Number(req.query.year), req.query.title);\n  res.send(dbRes.Items);\n}));\n\napp.delete(\"/database\", asyncErrWrapper(async (_, res) => {\n  console.log(\"Deleting Database\");\n  await dynamoDB.deleteTable({ TableName: TABLE }).promise();\n  await dynamoDB.waitFor(\"tableNotExists\", {TableName: TABLE}).promise();\n  console.log(\"Database deleted\");\n  res.status(200).send(\"Database deleted\");\n}));\n\napp.post(\"/database\", asyncErrWrapper(async (_, res, next) => {\n  console.log(\"Creating Database\");\n  await dynamoDB.createTable(dbParams).promise();\n  await dynamoDB.waitFor(\"tableExists\", {TableName: TABLE}).promise();\n  let response_json = JSON.parse((await getFromS3Bucket()).Body);\n  await Promise.all(writeToDynamo(response_json));\n  console.log(\"Database Created!\");\n  res.status(200).send(\"Database Created!\");\n}));\n\n//handles async errors\napp.use((err, req, res, next) => {\n  console.error(err);\n  if (err?.message.startsWith(\"Table already exists\"))\n    return res.status(210).send(\"Table already exists\");\n  else if (err?.message.startsWith(\"Requested resource not found: Table:\"))\n    return res.status(210).send(\"Table already deleted\");\n  res.status(500).send(err);\n});\n\napp.listen(SERVER_PORT, () => console.log(`Server running on port: ${SERVER_PORT}`));"]}]}